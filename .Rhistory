# Recursions to simulate age-structured social learning model
# Set IL_Only to "Yes" for population with only individual learners
# Set Stoch_E to "Yes" for stochastically changing environment
# Includes code for simple plot with time dynamics in the end
recurs <- function( tmax=1000 ,
max_age = 80  ,
b=c(0.35,0.35) ,
s=c(0.85,0.93),
u=0.01,
z=0.5,
c=0.01,
phi = 1,
SL_Error = 0,
IL_Only = "No",
Stoch_E = "Yes") {
#Create population array with age-strategy classes
n <- array( 0 , dim=c( max_age , 2 , 2) ) # age, adapted = 2, Learning Strategy , IL = 1
#Half IL and half SL
if ( IL_Only == "Yes"){
if (max_age == 2){
n[1,1,1] <- 1
n[1,1,2] <- 0
} else {
n[,1,1] <- 1/max_age
n[,1,2] <- 0
}
} else {
if (max_age == 2){
n[1,1,1] <- 0.5
n[1,1,2] <- 0.5
} else {
n[,1,1] <- 0.5/max_age
n[,1,2] <- 0.5/max_age
}
}
N <- sum(n)
#Output objects
lambda <- c()
lambdaSL <- c()
lambdaIL <- c()
Juveniles <- c()
PropAdapt <- c()
AdaptedPerAge <- matrix(nrow = max_age, ncol = tmax)
PropIL <- c()
EnvChange <- c()
for ( t in 1:tmax ) {
print(t)
#Number of individuals
N <- sum(n)
if (max_age == 2){
N_IL <- sum(n[1,,1])
N_SL <- sum(n[1,,2])
} else {
N_IL <- sum(n[,,1])
N_SL <- sum(n[,,2])
}
# life cycle:
# age (survival)
# reproduction
# environment change
# learning
# aging
# loop over age classes, in reverse
for ( i in (max_age-1):1 ) {
for ( j in 1:2 ) { #j indexes non-adapted/adapted
for (k in 1:2) { #k indexes learning strat
if (i==1 & k==1){ #Individual learning juveniles pay recruitment cost
n[ i+1 , j , k]  <- n[ i , j , k] * s[j] * (1-c)
} else {
n[ i+1 , j , k] <- n[ i , j , k] * s[j]
}
}#k
}#j
}#i
#Empty juvenile slots
for ( j in 1:2 ){
for ( k in 1:2 ){
for (l in 1:2) {
n[ 1 , j , k ] <- 0
}
}
}
# reproduction --- fill age class 1
# babies get stored in a vector
classes <- expand.grid(age=2:max_age, j=1:2, k=1:2)
babies <- rep(0, nrow(classes))
for ( i in 2:max_age ) {
for ( j in 1:2 ){
for ( k in 1:2 ) {
n_parents <- n[ i , j , k]
if (n_parents > 0){
nn <- n_parents * b[j]
if ( nn > 0 ) {
#Assign to vector
babies[which(classes$age==i & classes$j==j & classes$k==k)] <- babies[which(classes$age==i & classes$j==j & classes$k==k)] + nn
}
}
}#k
}#j
}#i
#Assign babies to juvenile class
for ( k in 1:2 ) {
n[1,1, k] <- sum(babies[which(classes$k==k)])
}
#environmental change
if (Stoch_E == "Yes") {
ut <- ifelse( runif(1) < u , 1 , 0 )
EnvChange[t] <- ifelse(ut==1, 1, 0)
if (ut == 1){
for ( i in 1:max_age) {
for ( k in 1:2 ) { #k indexes learning strat
n[ i , 1 , k ] <- sum(n[ i ,  , k ])
n[ i , 2 , k ] <- 0
}#k
}#j
}#i
} else {
for ( i in 1:max_age) {
for ( k in 1:2 ) { #k indexes learning strat
n[ i , 1 , k ] <- n[ i , 1 , k ] + u * n[ i , 2 , k ]
n[ i , 2 , k ] <- (1-u) * n[ i , 2 , k ]
}#k
}#j
}
# learning
# each juvenile gets a chance to learn, either individually or socially
for ( k in 1:2 ) {
if ( n[1,1,k]>0 ){
if ( k==1 ){
#Individual Learners
p_successful_ind <- n[1,1,k] * z
n[1,1,k] <- n[1,1,k] - p_successful_ind
n[1,2,k] <- p_successful_ind
} else {
#Social Learners
#Proportion of each age class
if (max_age == 2){
p_successful_soc <- sum(n[2,2,])/sum(n[2,,])
} else {
a <- c()
a[1] <- 0
for (j in 2:max_age) {
a[j]  <- sum(n[j,,])/sum(n[2:max_age,,])
}
#Proportion of adaptive behavior in each age class
q <- c()
for (j in 1:max_age) {
q[j]  <- sum(n[j,2,])/sum(n[j,,])
}
p_successful_soc <- sum((a^2)*q) #Equal pairs
for (i in 3:max_age) {
for (j in 2:(i-1)) {
p_successful_soc <- p_successful_soc + 2 * a[i]  *a[j] * ( q[i] * (phi/(phi+1))  + q[j] * (1/(phi+1)) )
}
}
}
n_successful_soc <- n[1,1,k] * p_successful_soc * (1-SL_Error)
n[1,1,k] <- n[1,1,k] - n_successful_soc
n[1,2,k] <- n_successful_soc
}
}
}#k
# Store info in output objects
if (max_age == 2){
lambda[t] <- sum(n[1,,])
lambdaIL[t] <- sum(n[1,,1]) / N_IL
lambdaSL[t] <- sum(n[1,,2]) / N_SL
} else {
lambda[t] <- sum(n)
lambdaIL[t] <- sum(n[,,1]) / N_IL
lambdaSL[t] <- sum(n[,,2]) / N_SL
}
Juveniles[t] <- sum(n[1,,])
PropAdapt[t] <- sum(n[,2,]/sum(n))
PropIL[t] <- sum(n[,,1]/sum(n))
for (x in 1:max_age) {
AdaptedPerAge[x,t] <- sum(n[x,2,]/sum(n[x,,]))
}
#Renormalize population size
if (max_age == 2){
n[1,,] <- n[1,,]/sum(n[1,,])
} else {
n <- n/sum(n)
}
}#t
return(list(n=n,
lambda=lambda,
lambdaIL=lambdaIL,
lambdaSL=lambdaSL,
Juveniles=Juveniles,
Adapt=PropAdapt,
IL= PropIL,
SL= 1- PropIL,
Change=EnvChange,
AdaptedPerAge=AdaptedPerAge))
}
result <- recurs()
par(mfrow=c(1,2))
plot(apply(result$AdaptedPerAge, 1, mean), type = "l", ylim = c(0,1), ylab = "Proportion Adapted", xlab = "Age")
plot(result$lambda/max(result$lambda), type= "l", ylim = c(0,1), ylab = "")
par(new=TRUE)
plot(result$SL,type = "l", ylim = c(0,1), col="green",  yaxt = "n", ylab = "")
par(new=TRUE)
plot(result$Adapt, type = "l", ylim = c(0,1), col = "red", yaxt = "n", ylab = "")
legend("topright", c("Fitness", "Prop Adapted", "Prop SL"), col = c("black", "red", "green"), lty = 1, cex = 0.6)
View(recurs)
sim_IL_Fert <- recurs(tmax=10000, s = c(0.85, 0.85), b = c(0.35, 0.5), IL_Only = "Yes", Stoch_E = "Yes")
# Plotting code for Fig 2. Interplay between demographic filtering and social learning
# Load function "recurs" from file "Recursions.R"
sim_IL_Fert <- recurs(tmax=10000, s = c(0.85, 0.85), b = c(0.35, 0.5), IL_Only = "Yes", Stoch_E = "Yes")
sim_IL_Viab <- recurs(tmax=10000, s = c(0.85, 0.93), b = c(0.35, 0.35), IL_Only = "Yes", Stoch_E = "Yes")
sim_SL_Fert <- recurs(tmax=10000, s = c(0.85, 0.85), b = c(0.35, 0.5), IL_Only = "No", Stoch_E = "Yes")
sim_SL_Viab <- recurs(tmax=10000, s = c(0.85, 0.93), b = c(0.35, 0.35), IL_Only = "No", Stoch_E = "Yes")
#calculate time since change
sim_IL_Fert$TimeSinceChange <- c()
for (i in 1:10000) {
print(i)
if (i <= min(which(sim_IL_Fert$Change==1))){
sim_IL_Fert$TimeSinceChange[i] <- i
} else {
sim_IL_Fert$TimeSinceChange[i] <- i - max(which(sim_IL_Fert$Change==1)[which(sim_IL_Fert$Change==1)<i])
}
}
sim_IL_Fert$AdaptPerTime <- c()
for (i in unique(sim_IL_Fert$TimeSinceChange)) {
sim_IL_Fert$AdaptPerTime[i] <- mean(sim_IL_Fert$Adapt[which(sim_IL_Fert$TimeSinceChange == i)])
}
sim_IL_Viab$TimeSinceChange <- c()
for (i in 1:10000) {
if (i <= min(which(sim_IL_Viab$Change==1))){
sim_IL_Viab$TimeSinceChange[i] <- i
} else {
sim_IL_Viab$TimeSinceChange[i] <- i - max(which(sim_IL_Viab$Change==1)[which(sim_IL_Viab$Change==1)<i])
}
}
sim_IL_Viab$AdaptPerTime <- c()
for (i in unique(sim_IL_Viab$TimeSinceChange)) {
sim_IL_Viab$AdaptPerTime[i] <- mean(sim_IL_Viab$Adapt[which(sim_IL_Viab$TimeSinceChange == i)])
}
#SL
sim_SL_Fert$TimeSinceChange <- c()
for (i in 1:10000) {
if (i <= min(which(sim_SL_Fert$Change==1))){
sim_SL_Fert$TimeSinceChange[i] <- i
} else {
sim_SL_Fert$TimeSinceChange[i] <- i - max(which(sim_SL_Fert$Change==1)[which(sim_SL_Fert$Change==1)<i])
}
}
sim_SL_Fert$AdaptPerTime <- c()
for (i in unique(sim_SL_Fert$TimeSinceChange)) {
sim_SL_Fert$AdaptPerTime[i] <- mean(sim_SL_Fert$Adapt[which(sim_SL_Fert$TimeSinceChange == i)])
}
sim_SL_Viab$TimeSinceChange <- c()
for (i in 1:10000) {
if (i <= min(which(sim_SL_Viab$Change==1))){
sim_SL_Viab$TimeSinceChange[i] <- i
} else {
sim_SL_Viab$TimeSinceChange[i] <- i - max(which(sim_SL_Viab$Change==1)[which(sim_SL_Viab$Change==1)<i])
}
}
sim_SL_Viab$AdaptPerTime <- c()
for (i in unique(sim_SL_Viab$TimeSinceChange)) {
sim_SL_Viab$AdaptPerTime[i] <- mean(sim_SL_Viab$Adapt[which(sim_SL_Viab$TimeSinceChange == i)])
}
par(mfrow = c(2,2),
mar = c(3.8,2.5,0,0.1),
oma = c(0,2,2,0.1))
plot(apply(sim_IL_Fert$AdaptedPerAge, 1, mean) , type = "l", lwd=2, ylim = c(0,1), ylab = "", xlab = "")
par(new=TRUE)
plot(apply(sim_IL_Viab$AdaptedPerAge, 1, mean), type = "l",lty=2, lwd=2, ylim = c(0,1), ylab = "", xlab = "")
mtext("Proportion Adapted per Age", side = 2, line = 3)
mtext("Age", side = 1, line = 2.3)
mtext("Individual Learners", side = 3, line = 0.5, cex = 1.2)
legend("topleft", "A", bty="n")
plot(apply(sim_SL_Fert$AdaptedPerAge, 1, mean), type = "l", lwd=2, ylim = c(0,1), ylab = "", xlab = "")
par(new=TRUE)
plot(apply(sim_SL_Viab$AdaptedPerAge, 1, mean), type = "l",lty=2, lwd=2, ylim = c(0,1), ylab = "", xlab = "")
mtext("Age", side = 1, line = 2.3)
mtext("Individual + Social Learners", side = 3, line = 0.5, cex = 1.2)
legend("topright", title = "Selection on", c("Fecundity (No Filtering)", "Viability (Demogr. Filtering)"), lty = c(1,2), lwd = 2, bty = "n")
legend("topleft", "B", bty="n")
plot(sim_IL_Fert$AdaptPerTime, type = "l", lwd=2, ylim = c(0,1), xlim = c(0,150), ylab = "", xlab = "")
par(new=TRUE)
plot(sim_IL_Viab$AdaptPerTime, type = "l", lwd=2, lty=2, ylim = c(0,1), xlim = c(0,150), ylab = "", xlab = "")
abline(h=0.5, lty= 3)
legend("topleft", "C", bty="n")
mtext("Proportion Adapted after Change", side = 2, line = 3)
mtext("Time Since Change", side = 1, line = 2.3)
plot(sim_SL_Fert$AdaptPerTime, type = "l", lwd=2, ylim = c(0,1), xlim = c(0,150), ylab = "", xlab = "")
par(new=TRUE)
plot(sim_SL_Viab$AdaptPerTime, type = "l", lwd=2, lty=2, ylim = c(0,1), xlim = c(0,150), ylab = "", xlab = "")
abline(h=0.5, lty= 3)
mtext("Time Since Change", side = 1, line = 2.3)
legend("topleft", "D", bty="n")
apply(sim_SL_Viab$AdaptedPerAge, 1, mean)
which.max(apply(sim_SL_Viab$AdaptedPerAge, 1, mean))
