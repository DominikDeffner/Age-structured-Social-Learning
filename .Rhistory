}
# life cycle:
# age (survival)
# reproduction
# environment change
# learning
# aging
# loop over age classes, in reverse
for ( i in (max_age-1):1 ) {
for ( j in 1:2 ) { #j indexes non-adapted/adapted
for (k in 1:2) { #k indexes learning strat
if (i==1 & k==1){ #Individual learning juveniles pay recruitment cost
n[ i+1 , j , k]  <- n[ i , j , k] * s[j] * (1-c)
} else {
n[ i+1 , j , k] <- n[ i , j , k] * s[j]
}
}#k
}#j
}#i
#Empty juvenile slots
for ( j in 1:2 ){
for ( k in 1:2 ){
for (l in 1:2) {
n[ 1 , j , k ] <- 0
}#j
}#k
}#l
# reproduction --- fill age class 1
# babies get stored in a vector
classes <- expand.grid(age=2:max_age, j=1:2, k=1:2)
babies <- rep(0, nrow(classes))
for ( i in 2:max_age ) {
for ( j in 1:2 ){
for ( k in 1:2 ) {
n_parents <- n[ i , j , k]
if (n_parents > 0){
nn <- n_parents * b[j]
if ( nn > 0 ) {
#Assign to vector
babies[which(classes$age==i & classes$j==j & classes$k==k)] <- babies[which(classes$age==i & classes$j==j & classes$k==k)] + nn
}
}
}#k
}#j
}#i
#Assign babies to juvenile class
for ( k in 1:2 ) {
n[1,1, k] <- sum(babies[which(classes$k==k)])
}
#environmental change
if (Stoch_E == "Yes") {
ut <- ifelse( runif(1) < u , 1 , 0 )
EnvChange[t] <- ifelse(ut==1, 1, 0)
if (ut == 1){
for ( i in 1:max_age) {
for ( k in 1:2 ) { #k indexes learning strat
n[ i , 1 , k ] <- sum(n[ i ,  , k ])
n[ i , 2 , k ] <- 0
}#k
}#j
}#i
} else {
for ( i in 1:max_age) {
for ( k in 1:2 ) { #k indexes learning strat
n[ i , 1 , k ] <- n[ i , 1 , k ] + u * n[ i , 2 , k ]
n[ i , 2 , k ] <- (1-u) * n[ i , 2 , k ]
}#k
}#j
}
# learning
# each juvenile gets a chance to learn, either individually or socially
for ( k in 1:2 ) {
if ( n[1,1,k]>0 ){
if ( k==1 ){
#Individual Learners
p_successful_ind <- n[1,1,k] * z
n[1,1,k] <- n[1,1,k] - p_successful_ind
n[1,2,k] <- p_successful_ind
} else {
#Social Learners
#Proportion of each age class
if (max_age == 2){
p_successful_soc <- sum(n[2,2,])/sum(n[2,,])
} else {
a <- c()
a[1] <- 0
for (j in 2:max_age) {
a[j]  <- sum(n[j,,])/sum(n[2:max_age,,])
}
#Proportion of adaptive behavior in each age class
q <- c()
for (j in 1:max_age) {
q[j]  <- sum(n[j,2,])/sum(n[j,,])
}
p_successful_soc <- sum((a^2)*q) #Equal pairs
for (i in 3:max_age) {
for (j in 2:(i-1)) {
p_successful_soc <- p_successful_soc + 2 * a[i]  *a[j] * ( q[i] * (phi/(phi+1))  + q[j] * (1/(phi+1)) )
}
}
}
n_successful_soc <- n[1,1,k] * p_successful_soc * (1-SL_Error)
n[1,1,k] <- n[1,1,k] - n_successful_soc
n[1,2,k] <- n_successful_soc
}
}
}#k
# Store info in output objects
if (max_age == 2){
lambda[t] <- sum(n[1,,])
lambdaIL[t] <- sum(n[1,,1]) / N_IL
lambdaSL[t] <- sum(n[1,,2]) / N_SL
} else {
lambda[t] <- sum(n)
lambdaIL[t] <- sum(n[,,1]) / N_IL
lambdaSL[t] <- sum(n[,,2]) / N_SL
}
Juveniles[t] <- sum(n[1,,])
PropAdapt[t] <- sum(n[,2,]/sum(n))
PropIL[t] <- sum(n[,,1]/sum(n))
for (x in 1:max_age) {
AdaptedPerAge[x,t] <- sum(n[x,2,]/sum(n[x,,]))
}
#Renormalize population size
if (max_age == 2){
n[1,,] <- n[1,,]/sum(n[1,,])
} else {
n <- n/sum(n)
}
}#t
return(list(n=n,
lambda=lambda,
lambdaIL=lambdaIL,
lambdaSL=lambdaSL,
Juveniles=Juveniles,
Adapt=PropAdapt,
IL= PropIL,
SL= 1- PropIL,
Change=EnvChange,
AdaptedPerAge=AdaptedPerAge))
}
result <- recurs()
par(mfrow=c(1,2))
plot(apply(result$AdaptedPerAge, 1, mean), type = "l", ylim = c(0,1), ylab = "Proportion Adapted", xlab = "Age")
plot(result$lambda/max(result$lambda), type= "l", ylim = c(0,1), ylab = "")
par(new=TRUE)
plot(result$SL,type = "l", ylim = c(0,1), col="green",  yaxt = "n", ylab = "")
par(new=TRUE)
plot(result$Adapt, type = "l", ylim = c(0,1), col = "red", yaxt = "n", ylab = "")
legend("topright", c("Fitness", "Prop Adapted", "Prop SL"), col = c("black", "red", "green"), lty = 1, cex = 0.6)
# Recursions to simulate age-structured social learning model
# Set IL_Only to "Yes" for population with only individual learners
# Set Stoch_E to "Yes" for stochastically changing environment
# max_age = 2 corresponds to discrete-generation model.
# Includes code for simple plot with time dynamics in the end
# Run this function with respective parameter values to reproduce
# results shown in Fig.1 and Fig.2
# Simulation function
recurs <- function( tmax=1000 ,           # Timesteps
max_age = 80  ,     # Maximum age (max_age = 2 corresponds to Rogers model)
b=c(0.35,0.35) ,    # Fertility rates for non-adapted and adapted individuals
s=c(0.85,0.93),     # Survival rates for non-adapted and adapted individuals
u=0.01,             # Rate of environmental change
z=0.5,              # Success rate of individual learning
c=0.01,             # Recruitment cost of individual learning
phi = 1,            # Age bias (phi = 1 means unbiased)
SL_Error = 0,       # Error rate in social learning
IL_Only = "No",     # Individual learners only?
Stoch_E = "Yes") {  # Stochastically changing environment?
#Create population array with age-strategy classes
n <- array( 0 , dim=c( max_age , 2 , 2) ) # age, adapted = 2, Learning Strategy , IL = 1
#Half IL and half SL
if ( IL_Only == "Yes"){
if (max_age == 2){
n[1,1,1] <- 1
n[1,1,2] <- 0
} else {
n[,1,1] <- 1/max_age
n[,1,2] <- 0
}
} else {
if (max_age == 2){
n[1,1,1] <- 0.5
n[1,1,2] <- 0.5
} else {
n[,1,1] <- 0.5/max_age
n[,1,2] <- 0.5/max_age
}
}
N <- sum(n)
#Output objects
lambda <- c()
lambdaSL <- c()
lambdaIL <- c()
Juveniles <- c()
PropAdapt <- c()
AdaptedPerAge <- matrix(nrow = max_age, ncol = tmax)
PropIL <- c()
EnvChange <- c()
for ( t in 1:tmax ) {
print(t)
#Number of individuals
N <- sum(n)
if (max_age == 2){
N_IL <- sum(n[1,,1])
N_SL <- sum(n[1,,2])
} else {
N_IL <- sum(n[,,1])
N_SL <- sum(n[,,2])
}
# life cycle:
# age (survival)
# reproduction
# environment change
# learning
# aging
# loop over age classes, in reverse
for ( i in (max_age-1):1 ) {
for ( j in 1:2 ) { #j indexes non-adapted/adapted
for (k in 1:2) { #k indexes learning strat
if (i==1 & k==1){ #Individual learning juveniles pay recruitment cost
n[ i+1 , j , k]  <- n[ i , j , k] * s[j] * (1-c)
} else {
n[ i+1 , j , k] <- n[ i , j , k] * s[j]
}
}#k
}#j
}#i
#Empty juvenile slots
for ( j in 1:2 ){
for ( k in 1:2 ){
for (l in 1:2) {
n[ 1 , j , k ] <- 0
}#j
}#k
}#l
# reproduction --- fill age class 1
# babies get stored in a vector
classes <- expand.grid(age=2:max_age, j=1:2, k=1:2)
babies <- rep(0, nrow(classes))
for ( i in 2:max_age ) {
for ( j in 1:2 ){
for ( k in 1:2 ) {
n_parents <- n[ i , j , k]
if (n_parents > 0){
nn <- n_parents * b[j]
if ( nn > 0 ) {
#Assign to vector
babies[which(classes$age==i & classes$j==j & classes$k==k)] <- babies[which(classes$age==i & classes$j==j & classes$k==k)] + nn
}
}
}#k
}#j
}#i
#Assign babies to juvenile class
for ( k in 1:2 ) {
n[1,1, k] <- sum(babies[which(classes$k==k)])
}
#environmental change
if (Stoch_E == "Yes") {
ut <- ifelse( runif(1) < u , 1 , 0 )
EnvChange[t] <- ifelse(ut==1, 1, 0)
if (ut == 1){
for ( i in 1:max_age) {
for ( k in 1:2 ) { #k indexes learning strat
n[ i , 1 , k ] <- sum(n[ i ,  , k ])
n[ i , 2 , k ] <- 0
}#k
}#j
}#i
} else {
for ( i in 1:max_age) {
for ( k in 1:2 ) { #k indexes learning strat
n[ i , 1 , k ] <- n[ i , 1 , k ] + u * n[ i , 2 , k ]
n[ i , 2 , k ] <- (1-u) * n[ i , 2 , k ]
}#k
}#j
}
# learning
# each juvenile gets a chance to learn, either individually or socially
for ( k in 1:2 ) {
if ( n[1,1,k]>0 ){
if ( k==1 ){
#Individual Learners
p_successful_ind <- n[1,1,k] * z
n[1,1,k] <- n[1,1,k] - p_successful_ind
n[1,2,k] <- p_successful_ind
} else {
#Social Learners
#Proportion of each age class
if (max_age == 2){
p_successful_soc <- sum(n[2,2,])/sum(n[2,,])
} else {
a <- c()
a[1] <- 0
for (j in 2:max_age) {
a[j]  <- sum(n[j,,])/sum(n[2:max_age,,])
}
#Proportion of adaptive behavior in each age class
q <- c()
for (j in 1:max_age) {
q[j]  <- sum(n[j,2,])/sum(n[j,,])
}
p_successful_soc <- sum((a^2)*q) #Equal pairs
for (i in 3:max_age) {
for (j in 2:(i-1)) {
p_successful_soc <- p_successful_soc + 2 * a[i]  *a[j] * ( q[i] * (phi/(phi+1))  + q[j] * (1/(phi+1)) )
}
}
}
n_successful_soc <- n[1,1,k] * p_successful_soc * (1-SL_Error)
n[1,1,k] <- n[1,1,k] - n_successful_soc
n[1,2,k] <- n_successful_soc
}
}
}#k
# Store info in output objects
if (max_age == 2){
lambda[t] <- sum(n[1,,])
lambdaIL[t] <- sum(n[1,,1]) / N_IL
lambdaSL[t] <- sum(n[1,,2]) / N_SL
} else {
lambda[t] <- sum(n)
lambdaIL[t] <- sum(n[,,1]) / N_IL
lambdaSL[t] <- sum(n[,,2]) / N_SL
}
Juveniles[t] <- sum(n[1,,])
PropAdapt[t] <- sum(n[,2,]/sum(n))
PropIL[t] <- sum(n[,,1]/sum(n))
for (x in 1:max_age) {
AdaptedPerAge[x,t] <- sum(n[x,2,]/sum(n[x,,]))
}
#Renormalize population size
if (max_age == 2){
n[1,,] <- n[1,,]/sum(n[1,,])
} else {
n <- n/sum(n)
}
}#t
return(list(n=n,
lambda=lambda,
lambdaIL=lambdaIL,
lambdaSL=lambdaSL,
Juveniles=Juveniles,
Adapt=PropAdapt,
IL= PropIL,
SL= 1- PropIL,
Change=EnvChange,
AdaptedPerAge=AdaptedPerAge))
}
result <- recurs()
par(mfrow=c(1,2))
plot(apply(result$AdaptedPerAge, 1, mean), type = "l", ylim = c(0,1), ylab = "Proportion Adapted", xlab = "Age")
plot(result$lambda/max(result$lambda), type= "l", ylim = c(0,1), ylab = "")
par(new=TRUE)
plot(result$SL,type = "l", ylim = c(0,1), col="green",  yaxt = "n", ylab = "")
par(new=TRUE)
plot(result$Adapt, type = "l", ylim = c(0,1), col = "red", yaxt = "n", ylab = "")
legend("topright", c("Fitness", "Prop Adapted", "Prop SL"), col = c("black", "red", "green"), lty = 1, cex = 0.6)
seq <-expand.grid(tmax=100, max_age=c(2,80), u = c(0.001, 0.005, 0.01, 0.05, 0.1, 0.2),
z=1,c=c(0.01,0.05,0.1),phi = 1, SL_Error = 0, IL_Only = c("Yes", "No"), Stoch_E = "No")
library(parallel)
result <- mclapply(
1:nrow(seq) ,
function(i) recurs(seq$tmax[i], seq$max_age[i], b = c(1,1.5), s = c(0.9,0.9), seq$u[i], seq$z[i], seq$c[i], seq$phi[i], seq$SL_Error[i], seq$IL_Only[i], seq$Stoch_E[i]),
mc.cores=1)
LambdaRog <- matrix(0, ncol = 6, nrow = 3)
LambdaRogIL <- matrix(0, ncol = 6, nrow = 3)
SLRog <- matrix(0, ncol = 6, nrow = 3)
LambdaAge <- matrix(0, ncol = 6, nrow = 3)
LambdaAgeIL <- matrix(0, ncol = 6, nrow = 3)
SLAge <- matrix(0, ncol = 6, nrow = 3)
for (i in unique(seq$c)) {
for (j in unique(seq$u)) {
LambdaRog[which(unique(seq$c) ==i), which(unique(seq$u) ==j)] <- result[[which(seq$c==i & seq$u==j &
seq$max_age == 2 & seq$IL_Only == "No")]]$lambda[unique(seq$tmax)]
LambdaRogIL[which(unique(seq$c) ==i), which(unique(seq$u) ==j)] <- result[[which(seq$c==i & seq$u==j &
seq$max_age == 2 & seq$IL_Only == "Yes")]]$lambda[unique(seq$tmax)]
SLRog[which(unique(seq$c) ==i), which(unique(seq$u) ==j)] <- result[[which(seq$c==i & seq$u==j &
seq$max_age == 2 & seq$IL_Only == "No")]]$SL[unique(seq$tmax)]
LambdaAge[which(unique(seq$c) ==i), which(unique(seq$u) ==j)] <- result[[which(seq$c==i & seq$u==j &
seq$max_age == 80 & seq$IL_Only == "No")]]$lambda[unique(seq$tmax)]
LambdaAgeIL[which(unique(seq$c) ==i), which(unique(seq$u) ==j)] <- result[[which(seq$c==i & seq$u==j &
seq$max_age == 80 & seq$IL_Only == "Yes")]]$lambda[unique(seq$tmax)]
SLAge[which(unique(seq$c) ==i), which(unique(seq$u) ==j)] <- result[[which(seq$c==i & seq$u==j &
seq$max_age == 80 & seq$IL_Only == "No")]]$SL[unique(seq$tmax)]
}
}
#color stuff
library(scales)
require(RColorBrewer)#load package
x <- seq(from=0, to=1, by=0.2) # fake data
col.pal <- brewer.pal(length(x), "Dark2") #create a pallette which you loop over for corresponding values
par(mfrow = c(2,2),
mar = c(2,4,1,0),
oma = c(2,0,2,0))
plot(SLRog[1,], lty=1, ylim = c(0,1),ann=FALSE, type = "l",xaxt= "n", xlab = "u", ylab = "Proportion Social Learners", lwd=3)
lines(SLRog[2,],lty = 2, lwd=3)
lines(SLRog[3,], lty = 3, lwd=3)
axis(side = 1, at = 1:6, labels =  c("0.001", "0.005", "0.01", "0.05", "0.1", "0.2"))
mtext(side = 2, line = 2.5, "Proportion of Social Learners")
mtext(side = 3, line = 1, "Discrete Generations (Rogers Model)")
legend("bottomleft",title = expression(paste("Cost of Ind Learn ",italic("c"), ":")), c("0.01","0.05","0.1"), lty=1:3,lwd=3, cex = 0.9, bty = "n")
legend("topright", "A", bty="n")
plot(SLAge[1,], lty=1, ylim = c(0,1), ann=FALSE, type = "l",xaxt= "n", xlab = "u", ylab = "Proportion Social Learners", lwd=3)
lines(SLAge[2,],lty = 2, lwd=3)
lines(SLAge[3,], lty = 3, lwd=3)
axis(side = 1, at = 1:6, labels =  c("0.001", "0.005", "0.01", "0.05", "0.1", "0.2"))
mtext(side = 3, line = 1, "Overlapping Generations")
legend("topright", "B", bty="n")
plot(LambdaRog[1,], ylim = c(1.15,1.35), lty=1, col = "grey",xaxt= "n", type = "l",xlab = "", ylab = "", lwd=3)
lines(LambdaRog[2,], lwd = 3, lty = 2, col = "grey")
lines(LambdaRog[3,], lwd = 3, lty = 3, col = "grey")
axis(side = 1, at = 1:6, labels =  c("0.001", "0.005", "0.01", "0.05", "0.1", "0.2"))
mtext(side = 2, line = 2.5,  expression(paste("Fitness (Population Growth Rate  ",lambda, ")")))
points(1:6, LambdaRogIL[1,], pch=16, cex = 1.5)
points(1:6, LambdaRogIL[2,], pch=17, cex = 1.5)
points(1:6, LambdaRogIL[3,], pch=18, cex = 1.5)
legend("topright", "C", bty="n")
plot(LambdaAge[1,], ylim = c(2.05, 2.25), lty=1,xaxt= "n", col = "grey", type = "l",xlab = "", ylab = "", lwd=3)
lines(LambdaAge[2,],lwd = 3, lty = 2, col = "grey")
lines(LambdaAge[3,], lwd = 3, lty = 3, col = "grey")
axis(side = 1, at = 1:6, labels =  c("0.001", "0.005", "0.01", "0.05", "0.1", "0.2"))
points(1:6, LambdaAgeIL[1,], pch=16, cex = 1.5)
points(1:6, LambdaAgeIL[2,], pch=17, cex = 1.5)
points(1:6, LambdaAgeIL[3,], pch=18, cex = 1.5)
legend("topright", "D", bty="n")
mtext(side = 1, line = 1, outer=TRUE, expression(paste("Rate of environmental change ",italic("u"))))
#Plotting script for Fig. S1 Proportion adapted per age
#Function for proportion of adapted individuals conditional on age
Prob_Adapted <- function(i, u, s1, s0, p) ((1-u)^(i-1))* ((s1^(i-1))*p)/((s1^(i-1))*p + (s0^(i-1))*(1-p))
#Partial Derivative with respect to age, can be used to calculate maxima
DerivativeP_A <- function(i, u, s1, s0, p) {
(1 - u)^(i) * p * s1^(i) * ((-(-1 + p) * s0^(i) + p * s1^(i)) * log(1 - u) + (-1 + p) * s0^(i) * (log(s0) - log(s1)))/
((-1 + p) * s0^(i) - p * s1^(i))^2
}
par(mfrow=c(2,3),
mar= c(1.5,1,1.5,2),
oma= c(2,4,0,0))
for (u_seq in c(0.001, 0.01, 0.1)) {
NEW <- ifelse(u_seq==0.001, FALSE, TRUE)
curve(Prob_Adapted(x, u=u_seq, s1=0.8, s0=0.8, p=0.7), from = 1,lty=which(c(0.001,0.01, 0.1)==u_seq), to=80, ylim=c(0,1),lwd=1.5, add=NEW,xlab="Age", ylab = "P(adapted|Age)")
}
mtext(expression(paste(sigma," = 1")), side = 3, line = 0.5, cex = 0.7)
mtext(expression(paste(italic(z)," = 0.1                                           ", italic(z)," = 0.7")), side = 2, line = 2.9, outer = TRUE, cex = 0.7)
mtext("Proportion Adapted per Age", side = 2, line = 1.5, outer = TRUE, cex = 0.7)
mtext("Age", side = 1, line = 0.5, outer = TRUE, cex = 0.7)
for (u_seq in c(0.001, 0.01, 0.1)) {
NEW <- ifelse(u_seq==0.001, FALSE, TRUE)
curve(Prob_Adapted(x, u=u_seq, s1=0.8, s0=0.6, p=0.7), from = 1,lty=which(c(0.001,0.01, 0.1)==u_seq), to=80,ylim=c(0,1),lwd=1.5, add=NEW,xlab="Age", ylab = "P(adapted|Age)")
}
mtext(expression(paste(sigma," = 0.75")), side = 3, line = 0.5, cex = 0.7)
for (u_seq in c(0.001, 0.01, 0.1)) {
NEW <- ifelse(u_seq==0.001, FALSE, TRUE)
curve(Prob_Adapted(x, u=u_seq, s1=0.8, s0=0.4, p=0.7), from = 1,lty=which(c(0.001,0.01, 0.1)==u_seq), to=80, ylim=c(0,1),lwd=1.5, add=NEW,xlab="Age", ylab = "P(adapted|Age)")
}
mtext(expression(paste(sigma," = 0.5")), side = 3, line = 0.5, cex = 0.7)
for (u_seq in c(0.001, 0.01, 0.1)) {
NEW <- ifelse(u_seq==0.001, FALSE, TRUE)
curve(Prob_Adapted(x, u=u_seq, s1=0.8, s0=0.8, p=0.1), from = 1,lty=which(c(0.001,0.01, 0.1)==u_seq), to=80, ylim=c(0,1),lwd=1.5, add=NEW,xlab="Age", ylab = "P(adapted|Age)")
}
legend("top",title = expression(paste("Rate of Change ", italic(u))), c("0.001","0.01","0.1"), lty=1:5,lwd=1.5, cex = 1, bty="n")
for (u_seq in c(0.001, 0.01, 0.1)) {
NEW <- ifelse(u_seq==0.001, FALSE, TRUE)
curve(Prob_Adapted(x, u=u_seq,s1=0.8, s0=0.6, p=0.1), from = 1,lty=which(c(0.001,0.01, 0.1)==u_seq), to=80, ylim=c(0,1),lwd=1.5, add=NEW,xlab="Age", ylab = "P(adapted|Age)")
}
for (u_seq in c(0.001, 0.01, 0.1)) {
NEW <- ifelse(u_seq==0.001, FALSE, TRUE)
curve(Prob_Adapted(x, u=u_seq, s1=0.8, s0=0.4, p=0.1), from = 1,lty=which(c(0.001,0.01, 0.1)==u_seq), to=80, ylim=c(0,1),lwd=1.5, add=NEW,xlab="Age", ylab = "P(adapted|Age)")
}
seq_temporal<- expand.grid(Nsim=10, tmax=7000, Nmax=1000, max_age=80, sigma= c(0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1), u = c(0.001, 0.005, 0.01, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3),
z=c(0.01,0.5,1),c= c(0.05, 0.1, 0.2), mu_pi = 0.005,mu_phi= 0.005, SL_Error=c(0,0.1,0.3), Nmodels = 2)
seq_spatial<-expand.grid(Nsim=10, tmax=7000, NmaxPerGroup=500, max_age=80, sigma= c(0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1), m = c(0.001, 0.005, 0.01, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3),
z=c(0.01,0.5,1),c= c(0.05, 0.1, 0.2), mu_pi = 0.005,mu_phi= 0.005, SL_Error=c(0,0.1,0.3),Nmodels = 2, NGroups=4)
# Code for Fig. 3 Thresholds for older generations
# to have higher proportions of adaptive behavior
p <- function(u, s){
1 - (u / (1 - s))
}
par(oma=c(0,0,0,0))
curve(p(u=0.01,x), from = 0, to = 1, type = "n", bty = "l",ylab = "", xlab = "")
for (u in c(0.001,0.01,0.1,0.2,0.3,0.4, 0.5)) {
curve(p(u=u,x), from = 0, to = 1, add = TRUE, lwd = 1.5, ylab = "", xlab = "")
}
mtext(expression(italic(hat(p))), line=2.5, side=2, cex = 1.2)
mtext(expression(paste(sigma," = ", s[0]/s[1])), line=3, side=1, cex = 1.2)
text(0.26,0.26, expression(paste(italic(u), " = 0.5")), srt = -45, cex = 0.7)
text(0.34,0.34, expression(paste(italic(u), " = 0.4")), srt = -45, cex = 0.7)
text(0.42,0.42, expression(paste(italic(u), " = 0.3")), srt = -45, cex = 0.7)
text(0.52,0.52, expression(paste(italic(u), " = 0.2")), srt = -45, cex = 0.7)
text(0.65,0.65,  expression(paste(italic(u), " = 0.1")), srt = -45, cex = 0.7)
text(0.86,0.86,  expression(paste(italic(u), " = 0.01")), srt = -44, cex = 0.7)
text(0.914,0.914,  expression(paste(italic(u), " = 0.001")), srt = -45, cex = 0.7)
# Code for Fig. 3 Thresholds for older generations
# to have higher proportions of adaptive behavior
p <- function(u, s){
1 - (u / (1 - s))
}
par(oma=c(0,0,0,0))
curve(p(u=0.01,x), from = 0, to = 1, type = "n", bty = "l",ylab = "", xlab = "")
for (u in c(0.001,0.01,0.1,0.2,0.3,0.4, 0.5)) {
curve(p(u=u,x), from = 0, to = 1, add = TRUE, lwd = 1.5, ylab = "", xlab = "")
}
mtext(expression(italic(hat(p))), line=2.5, side=2, cex = 1.2)
mtext(expression(paste(sigma," = ", s[0]/s[1])), line=3, side=1, cex = 1.2)
text(0.26,0.26, expression(paste(italic(u), " = 0.5")), srt = -45, cex = 0.7)
text(0.34,0.34, expression(paste(italic(u), " = 0.4")), srt = -45, cex = 0.7)
text(0.42,0.42, expression(paste(italic(u), " = 0.3")), srt = -45, cex = 0.7)
text(0.52,0.52, expression(paste(italic(u), " = 0.2")), srt = -45, cex = 0.7)
text(0.65,0.65,  expression(paste(italic(u), " = 0.1")), srt = -45, cex = 0.7)
text(0.86,0.86,  expression(paste(italic(u), " = 0.01")), srt = -44, cex = 0.7)
text(0.914,0.914,  expression(paste(italic(u), " = 0.001")), srt = -45, cex = 0.7)
